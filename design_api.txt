1. Authentication
    When a client signs up, the backend creates a new user record in the database and sends the client an access token and a refresh token in the response.
    The client should save these tokens locally (e.g., in local storage) and use them for future requests that require authentication. The access token is used to authenticate the client in subsequent requests, while the refresh token can be used to obtain a new access token when the current one expires.
    Client -> POST /api/users/signup
        Request Body:
        {
            "username": "...",
            "password": "...",
            "email": "..."
        }
    Server -> Client
        Response:
        {
            "access_token": "...",
            "refresh_token": "...",
        }
    
    
    When a client signs in, the backend verifies the username, password, and one-time password (OTP). If the credentials are valid, the backend updates the client's status to 'online' and sends the successful message in the response.
    Client -> POST /api/users/signin
        Request Body:
        {
            "username": "...",
            "password": "...",
            "otp": "..."
        }
        Request Auth:
            Bearer: access_token
    Server -> Client
        Response:
        {
            "message": f"{username} signin
        }
    
    When a client logs out, the backend verifies the username. If the username is valid and user is authenticated by the provided access token, the backends updates the client's status to 'offline' and sends the successful message in the response.
    Client -> POST /api/users/logout
        Request Body:
        {
            "username": "..."
        }
        Request Auth:
            Bearer: access_token
    Server -> Client
        Response:
        {
            "message": f"{username} logout
        }
    
    When a client wants to retrieve their user data from the database, the backend first verifies that the username is valid and the user is authenticated by the provided access token. If the authentication is successful, the backend sends the user's data in the response.
    Client -> GET /api/users/me
        Request Body:
        {
            "username": "..."
        }
        Request Auth:
            Bearer: access_token
    Server -> Client
        Response:
        {
            ...user data...
        }
    
    When a client wants to update their user data in the database, they send a PUT request to the `/api/users/me` endpoint. The request body should include all the fields that need to be updated.
    The backend first verifies that the provided username is valid and the user is authenticated using the access token included in the request's Authorization header.
    If the authentication is successful, the backend updates the user's data in the database with the new values provided in the request body. After the update, the backend sends the user's updated data in the response.
    Client -> PUT /api/users/me
        Request Body:
        {
            "username": "...",
            ...
        }
        Request Auth:
            Bearer: access_token
    Server -> Client
        Response:
        {
            ...user's updated data...
        }
    
    When a client wants to retrieve their access and refresh tokens, they send a POST request to the /api/token endpoint with their username and password. The backend then sends the refresh and access tokens in the response.
    Client -> POST /api/token
        Request Body:
        {
            "username": "...",
            "password"" "..."
        }
    Server -> Client:
        Response:
        {
            "refresh": "...",
            "access"": "..."
        }
    
    When the access token is expired and the client want to renew the access token, they send a POST request to the /api/token/refresh with their username, password and refresh token. The backend then sends the access token in the response.
    Client -> POST /api/token/refresh
        Request Body:
        {
            "username": "...",
            "password": "...",
            "refresh": "..."
        }
    Server -> Client:
        Response:
        {
            "access": "..."
        }
    

2. Game:
    When the 
